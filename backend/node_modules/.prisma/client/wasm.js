
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  userType: 'userType',
  emailVerified: 'emailVerified',
  phone: 'phone',
  phoneVerified: 'phoneVerified',
  active: 'active',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  profilePictureUrl: 'profilePictureUrl',
  bio: 'bio',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revoked: 'revoked',
  revokedAt: 'revokedAt'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerUserId: 'providerUserId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressType: 'addressType',
  streetAddress: 'streetAddress',
  aptSuite: 'aptSuite',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  isDefault: 'isDefault',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  species: 'species',
  breed: 'breed',
  birthdate: 'birthdate',
  weight: 'weight',
  gender: 'gender',
  microchipId: 'microchipId',
  pictureUrl: 'pictureUrl',
  attributes: 'attributes',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PetHealthRecordScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  recordDate: 'recordDate',
  recordType: 'recordType',
  description: 'description',
  vetName: 'vetName',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetVaccinationScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  name: 'name',
  administeredDate: 'administeredDate',
  expirationDate: 'expirationDate',
  lotNumber: 'lotNumber',
  administeredBy: 'administeredBy',
  documentUrl: 'documentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetAllergyScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  allergen: 'allergen',
  severity: 'severity',
  diagnosisDate: 'diagnosisDate',
  symptoms: 'symptoms',
  treatment: 'treatment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetMedicationScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  name: 'name',
  dosage: 'dosage',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  instructions: 'instructions',
  prescribedBy: 'prescribedBy',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  phoneNumber: 'phoneNumber',
  email: 'email',
  website: 'website',
  logoUrl: 'logoUrl',
  addressId: 'addressId',
  businessHours: 'businessHours',
  active: 'active',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClinicServiceScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  name: 'name',
  description: 'description',
  duration: 'duration',
  price: 'price',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicStaffScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  firstName: 'firstName',
  lastName: 'lastName',
  title: 'title',
  bio: 'bio',
  specialties: 'specialties',
  pictureUrl: 'pictureUrl',
  email: 'email',
  phoneNumber: 'phoneNumber',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffAvailabilityScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  staffId: 'staffId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  serviceId: 'serviceId',
  staffId: 'staffId',
  userId: 'userId',
  petId: 'petId',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  noteText: 'noteText',
  cancelledBy: 'cancelledBy',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentNoteScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  note: 'note',
  addedBy: 'addedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  parentId: 'parentId',
  name: 'name',
  description: 'description',
  displayOrder: 'displayOrder',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  sku: 'sku',
  featured: 'featured',
  publishedAt: 'publishedAt',
  metadata: 'metadata',
  attributes: 'attributes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  sku: 'sku',
  price: 'price',
  compareAtPrice: 'compareAtPrice',
  costPrice: 'costPrice',
  options: 'options',
  imageUrls: 'imageUrls',
  weight: 'weight',
  weightUnit: 'weightUnit',
  dimensions: 'dimensions',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  locationCode: 'locationCode',
  reorderThreshold: 'reorderThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryTransactionScalarFieldEnum = {
  id: 'id',
  inventoryItemId: 'inventoryItemId',
  quantity: 'quantity',
  type: 'type',
  reference: 'reference',
  notes: 'notes',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ShoppingCartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestId: 'guestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingCartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  variantId: 'variantId',
  quantity: 'quantity',
  addedAt: 'addedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestEmail: 'guestEmail',
  orderNumber: 'orderNumber',
  status: 'status',
  currencyCode: 'currencyCode',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  discount: 'discount',
  total: 'total',
  notes: 'notes',
  billingAddressId: 'billingAddressId',
  shippingAddressId: 'shippingAddressId',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  promoCode: 'promoCode',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  variantId: 'variantId',
  name: 'name',
  sku: 'sku',
  quantity: 'quantity',
  price: 'price',
  discount: 'discount',
  tax: 'tax',
  total: 'total',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  minimumOrderAmount: 'minimumOrderAmount',
  startDate: 'startDate',
  endDate: 'endDate',
  usageLimit: 'usageLimit',
  usageCount: 'usageCount',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetType: 'targetType',
  targetId: 'targetId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  approved: 'approved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewReplyScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewVoteScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  isUpvote: 'isUpvote',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  metadata: 'metadata',
  readAt: 'readAt',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  channel: 'channel',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  emailSubject: 'emailSubject',
  emailBody: 'emailBody',
  pushTitle: 'pushTitle',
  pushBody: 'pushBody',
  smsBody: 'smsBody',
  parameters: 'parameters',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  providerToken: 'providerToken',
  last4: 'last4',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  cardholderName: 'cardholderName',
  isDefault: 'isDefault',
  billingAddressId: 'billingAddressId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentMethodId: 'paymentMethodId',
  orderId: 'orderId',
  amount: 'amount',
  currencyCode: 'currencyCode',
  status: 'status',
  provider: 'provider',
  providerTransactionId: 'providerTransactionId',
  providerResponse: 'providerResponse',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentRefundScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  reason: 'reason',
  notes: 'notes',
  status: 'status',
  providerRefundId: 'providerRefundId',
  requestedBy: 'requestedBy',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.PermissionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action'
};

exports.Prisma.RolePermissionOrderByRelevanceFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  phone: 'phone'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  profilePictureUrl: 'profilePictureUrl',
  bio: 'bio'
};

exports.Prisma.UserRoleOrderByRelevanceFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  updatedBy: 'updatedBy'
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token'
};

exports.Prisma.OAuthAccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerUserId: 'providerUserId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressType: 'addressType',
  streetAddress: 'streetAddress',
  aptSuite: 'aptSuite',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country'
};

exports.Prisma.PetOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  breed: 'breed',
  gender: 'gender',
  microchipId: 'microchipId',
  pictureUrl: 'pictureUrl'
};

exports.Prisma.PetHealthRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  petId: 'petId',
  recordType: 'recordType',
  description: 'description',
  vetName: 'vetName',
  documents: 'documents'
};

exports.Prisma.PetVaccinationOrderByRelevanceFieldEnum = {
  id: 'id',
  petId: 'petId',
  name: 'name',
  lotNumber: 'lotNumber',
  administeredBy: 'administeredBy',
  documentUrl: 'documentUrl'
};

exports.Prisma.PetAllergyOrderByRelevanceFieldEnum = {
  id: 'id',
  petId: 'petId',
  allergen: 'allergen',
  severity: 'severity',
  symptoms: 'symptoms',
  treatment: 'treatment'
};

exports.Prisma.PetMedicationOrderByRelevanceFieldEnum = {
  id: 'id',
  petId: 'petId',
  name: 'name',
  dosage: 'dosage',
  frequency: 'frequency',
  instructions: 'instructions',
  prescribedBy: 'prescribedBy'
};

exports.Prisma.ClinicOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  phoneNumber: 'phoneNumber',
  email: 'email',
  website: 'website',
  logoUrl: 'logoUrl',
  addressId: 'addressId'
};

exports.Prisma.ClinicServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  name: 'name',
  description: 'description'
};

exports.Prisma.ClinicStaffOrderByRelevanceFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  firstName: 'firstName',
  lastName: 'lastName',
  title: 'title',
  bio: 'bio',
  specialties: 'specialties',
  pictureUrl: 'pictureUrl',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.StaffAvailabilityOrderByRelevanceFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  staffId: 'staffId',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.AppointmentOrderByRelevanceFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  serviceId: 'serviceId',
  staffId: 'staffId',
  userId: 'userId',
  petId: 'petId',
  noteText: 'noteText',
  cancelledBy: 'cancelledBy',
  cancelReason: 'cancelReason'
};

exports.Prisma.AppointmentNoteOrderByRelevanceFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  note: 'note',
  addedBy: 'addedBy'
};

exports.Prisma.ProductCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  parentId: 'parentId',
  name: 'name',
  description: 'description'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  sku: 'sku'
};

exports.Prisma.ProductVariantOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  sku: 'sku',
  imageUrls: 'imageUrls',
  weightUnit: 'weightUnit'
};

exports.Prisma.InventoryItemOrderByRelevanceFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  locationCode: 'locationCode'
};

exports.Prisma.InventoryTransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  inventoryItemId: 'inventoryItemId',
  type: 'type',
  reference: 'reference',
  notes: 'notes',
  createdBy: 'createdBy'
};

exports.Prisma.ShoppingCartOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestId: 'guestId'
};

exports.Prisma.ShoppingCartItemOrderByRelevanceFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  variantId: 'variantId'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestEmail: 'guestEmail',
  orderNumber: 'orderNumber',
  currencyCode: 'currencyCode',
  notes: 'notes',
  billingAddressId: 'billingAddressId',
  shippingAddressId: 'shippingAddressId',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  promoCode: 'promoCode'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  variantId: 'variantId',
  name: 'name',
  sku: 'sku'
};

exports.Prisma.PromotionOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  discountType: 'discountType'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetId: 'targetId',
  title: 'title',
  content: 'content'
};

exports.Prisma.ReviewReplyOrderByRelevanceFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  content: 'content'
};

exports.Prisma.ReviewVoteOrderByRelevanceFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content'
};

exports.Prisma.NotificationPreferenceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  channel: 'channel'
};

exports.Prisma.NotificationTemplateOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  emailSubject: 'emailSubject',
  emailBody: 'emailBody',
  pushTitle: 'pushTitle',
  pushBody: 'pushBody',
  smsBody: 'smsBody'
};

exports.Prisma.PaymentMethodOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  providerToken: 'providerToken',
  last4: 'last4',
  cardholderName: 'cardholderName',
  billingAddressId: 'billingAddressId'
};

exports.Prisma.PaymentTransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentMethodId: 'paymentMethodId',
  orderId: 'orderId',
  currencyCode: 'currencyCode',
  provider: 'provider',
  providerTransactionId: 'providerTransactionId'
};

exports.Prisma.PaymentRefundOrderByRelevanceFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  reason: 'reason',
  notes: 'notes',
  status: 'status',
  providerRefundId: 'providerRefundId',
  requestedBy: 'requestedBy'
};
exports.UserType = exports.$Enums.UserType = {
  customer: 'customer',
  vendor: 'vendor',
  admin: 'admin'
};

exports.PetSpecies = exports.$Enums.PetSpecies = {
  dog: 'dog',
  cat: 'cat',
  bird: 'bird',
  fish: 'fish',
  reptile: 'reptile',
  small_mammal: 'small_mammal',
  other: 'other'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  scheduled: 'scheduled',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled',
  no_show: 'no_show'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.ReviewTargetType = exports.$Enums.ReviewTargetType = {
  product: 'product',
  clinic: 'clinic',
  service: 'service'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  authorized: 'authorized',
  paid: 'paid',
  failed: 'failed',
  refunded: 'refunded'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  User: 'User',
  UserProfile: 'UserProfile',
  UserRole: 'UserRole',
  RefreshToken: 'RefreshToken',
  OAuthAccount: 'OAuthAccount',
  Address: 'Address',
  Pet: 'Pet',
  PetHealthRecord: 'PetHealthRecord',
  PetVaccination: 'PetVaccination',
  PetAllergy: 'PetAllergy',
  PetMedication: 'PetMedication',
  Clinic: 'Clinic',
  ClinicService: 'ClinicService',
  ClinicStaff: 'ClinicStaff',
  StaffAvailability: 'StaffAvailability',
  Appointment: 'Appointment',
  AppointmentNote: 'AppointmentNote',
  ProductCategory: 'ProductCategory',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  InventoryItem: 'InventoryItem',
  InventoryTransaction: 'InventoryTransaction',
  ShoppingCart: 'ShoppingCart',
  ShoppingCartItem: 'ShoppingCartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Promotion: 'Promotion',
  Review: 'Review',
  ReviewReply: 'ReviewReply',
  ReviewVote: 'ReviewVote',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  NotificationTemplate: 'NotificationTemplate',
  PaymentMethod: 'PaymentMethod',
  PaymentTransaction: 'PaymentTransaction',
  PaymentRefund: 'PaymentRefund'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
