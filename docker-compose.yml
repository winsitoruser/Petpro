version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "${API_PORT:-8080}:${API_PORT:-8080}"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_PORT=${API_PORT:-8080}
      - API_HOST=${API_HOST:-0.0.0.0}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - WEB_VENDOR_URL=${WEB_VENDOR_URL}
      - WEB_ADMIN_URL=${WEB_ADMIN_URL}
      - MOBILE_APP_URL=${MOBILE_APP_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${API_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 512M

  # Web Vendor Portal
  web-vendor:
    build:
      context: ./web-vendor
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "3000:3000"
    volumes:
      - ./web-vendor:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=${API_URL}/api
    depends_on:
      - backend
    networks:
      - petpro_network

  # Web Admin Portal
  web-admin:
    build:
      context: ./web-admin
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "3001:3000"
    volumes:
      - ./web-admin:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=${API_URL}/api
    depends_on:
      - backend
    networks:
      - petpro_network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=petpro${NODE_ENV:+_$NODE_ENV}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      # Performance and security settings
      - max_connections=200
      - shared_buffers=512MB
      - effective_cache_size=1536MB
      - work_mem=16MB
      - maintenance_work_mem=128MB
      - min_wal_size=1GB
      - max_wal_size=4GB
      - wal_buffers=16MB
      - checkpoint_completion_target=0.9
      - default_statistics_target=100
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init/postgres:/docker-entrypoint-initdb.d
      - ./backend/src/db/migrations:/docker-entrypoint-initdb.d/migrations
      - ./docker-config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker-config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    shm_size: 512MB
    
  # PgBouncer Connection Pooling
  pgbouncer:
    image: bitnami/pgbouncer:1.18.0
    ports:
      - "6432:6432"
    environment:
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=petpro${NODE_ENV:+_$NODE_ENV}
      - PGBOUNCER_PORT=6432
      - PGBOUNCER_MAX_CLIENT_CONN=1000
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_DEFAULT_POOL_SIZE=50
      - PGBOUNCER_MAX_DB_CONNECTIONS=100
      - PGBOUNCER_ADMIN_USERS=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "bash", "-c", "PGPASSWORD=$${POSTGRESQL_PASSWORD} psql -h 127.0.0.1 -p 6432 -U $${POSTGRESQL_USERNAME} -d $${POSTGRESQL_DATABASE} -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
          
  # PostgreSQL Monitoring Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres_exporter:monitoring_password_changeme@postgres:5432/postgres?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    volumes:
      - ./docker-config/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    profiles: ["monitoring"]

  # PostgreSQL Scheduled Backup Service
  postgres-backup:
    image: postgres:14-alpine
    volumes:
      - postgres_backup:/backup
      - ./docker-init/postgres/backup-postgres.sh:/backup.sh:ro
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
         echo \"Starting scheduled PostgreSQL backup...\";
         /backup.sh;
         echo \"Backup completed. Sleeping for 24 hours...\";
         sleep 86400;
       done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - petpro_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    profiles: ["backup"]
    
  # PgAdmin - PostgreSQL Management Tool
  pgadmin:
    image: dpage/pgadmin4:7.4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@petpro.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-pgadminpassword}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="Authorized users only. All activities are logged."
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 384M
    profiles: ["development"]

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker-config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      
  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:RELEASE.2023-07-21T21-12-44Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY:-minio-access-key}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY:-minio-secret-key}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_URL:-http://localhost:9001}
    volumes:
      - minio_data:/data
      - ./docker-init/minio:/docker-entrypoint-initdb.d
    command: server /data --console-address ":9001"
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
      
  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8025"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Mobile App Development Service
  mobile-app:
    build:
      context: ./mobile-app
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    volumes:
      - ./mobile-app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_URL=${API_URL}
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
    depends_on:
      - backend
    networks:
      - petpro_network
    # Allow host discovery for mobile devices to connect
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Elasticsearch initializer - runs once to generate certificates and setup security
  elasticsearch-init:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    volumes:
      - ./docker-init/elasticsearch/generate-certs.sh:/usr/share/elasticsearch/generate-certs.sh:ro
      - ./docker-init/elasticsearch/setup-users.sh:/usr/share/elasticsearch/setup-users.sh:ro
      - es_certs:/usr/share/elasticsearch/config/certs
    command: ["bash", "-c", "chmod +x /usr/share/elasticsearch/generate-certs.sh && /usr/share/elasticsearch/generate-certs.sh"]
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    networks:
      - petpro_network
    profiles:
      - init

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - node.name=petpro-es01
      - cluster.name=petpro-cluster
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./docker-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - es_certs:/usr/share/elasticsearch/config/certs
    networks:
      - petpro_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD:-changeme} http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ELASTICSEARCH_USERNAME=logstash_system
      - ELASTICSEARCH_PASSWORD=${LOGSTASH_PASSWORD:-changeme}
    volumes:
      - ./docker-config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker-config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - es_certs:/usr/share/logstash/config/certs:ro
    networks:
      - petpro_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SMTP_PASSWORD=${KIBANA_SMTP_PASSWORD:-changeme}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-changeme}
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    volumes:
      - ./docker-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./docker-config/kibana/email-config.yml:/usr/share/kibana/config/email-config.yml:ro
      - ./docker-init/kibana/alerts:/alerts:ro
      - ./docker-init/kibana/dashboards:/dashboards:ro
      - es_certs:/usr/share/kibana/config/certs:ro
    networks:
      - petpro_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q '\"status\":{\"overall\":{\"level\":\"available\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      
  # Kibana initializer - runs once to set up alerts and dashboards
  kibana-init:
    image: curlimages/curl:latest
    volumes:
      - ./docker-init/kibana/init.sh:/init.sh:ro
      - ./docker-init/kibana/alerts:/alerts:ro
      - ./docker-init/kibana/dashboards:/dashboards:ro
    entrypoint: ["/bin/sh", "-c"]
    command: ["sleep 30 && /init.sh"]
    networks:
      - petpro_network
    depends_on:
      kibana:
        condition: service_healthy
    restart: on-failure:3
    profiles:
      - init

networks:
  petpro_network:
    name: petpro_network
    driver: bridge

volumes:
  postgres_data:
    name: petpro_postgres_data
  postgres_backup:
    name: petpro_postgres_backup
  pgadmin_data:
    name: petpro_pgadmin_data
  redis_data:
    name: petpro_redis_data
  minio_data:
    name: petpro_minio_data
  backend_node_modules:
    name: petpro_backend_node_modules
  backend_logs:
    name: petpro_backend_logs
  elasticsearch_data:
    name: petpro_elasticsearch_data
  es_certs:
    name: petpro_es_certs
