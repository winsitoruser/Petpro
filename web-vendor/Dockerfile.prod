FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Add args from docker-compose
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy all files
COPY . .

# Create a Next.js API health check endpoint
RUN mkdir -p pages/api
RUN echo 'export default function handler(req, res) { res.status(200).json({ status: "ok" }) }' > pages/api/health.js

# Build the application
RUN npm run build

# Production image
FROM node:18-alpine as runner

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Set environment variables
ENV NODE_ENV production
ENV PORT=3000

# Copy package.json and package-lock.json
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules

# Set proper permissions
RUN chown -R appuser:appgroup /app

# Run as non-root user
USER appuser

# Set resource limits
ENV NEXT_TELEMETRY_DISABLED=1

# Expose the listening port
EXPOSE 3000

# Run the application
CMD ["npm", "start"]
